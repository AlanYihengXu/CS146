Given nodes p and q in a BST, we can map the path to each node in a list. Since both list increment a layer per index, it follows that the last index where the lists for p and q are the same holds the lowest common ancestor of p and q.
We can create the path list for a node by traversing the BST to seach for that node and adding the current node to a list each step. Then, we can iterate through both lists for p and q concurrently until either the nodes are different or one of the lists end, at which point we can return the previous node.
To reduce complexity, we can compare the nodes while traversing the BST in seach of p and q. If at any node, p is >= node while q is <= node or vice versa, we know that the ancestry for p and q diverges there since p != q, so we can return the current node.
